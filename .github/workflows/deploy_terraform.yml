name: Deploy terraform

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  publish:
    name: Publish image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get Ecr host
        run: |
          ecrhost=$(aws ecr describe-repositories --repository-names "${{ vars.PROJECT }}"-repository | grep -oP '"repositoryUri": "\K[^"]+(?=")')
          echo "ECRHOST=$ecrhost" >> $GITHUB_ENV

      - name: Configure Docker
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECRHOST }}

      - name: Get app version
        run: |
          version=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "App version: $version"
          echo "VERSION=$version" >> $GITHUB_ENV
        
      - name: Build Docker Image
        run: docker build -t "${{ vars.PROJECT }}" .

      - name: Create tag repository
        run:
          docker tag "${{ vars.PROJECT }}":latest "${{ env.ECRHOST }}:${{ env.VERSION }}"

      - name: Push Docker Image
        run: docker push ${{ env.ECRHOST }}:${{ env.VERSION }}
        continue-on-error: true      

  plan:
    name: Plan
    runs-on: ubuntu-20.04
    needs: publish

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Get app version
      run: |
        version=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "App version: $version"
        echo "VERSION=$version" >> $GITHUB_ENV
        
    - name: Plan changes
      run: |
        cd terraform
        terraform fmt -recursive
        terraform init
        terraform plan -var='aws_region=${{ vars.AWS_REGION }}' -var='app_version=${{ env.VERSION }}' -var="tokensecret=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var="projectname=${{ vars.PROJECT }}" -var="cluster_name=${{ vars.CLUSTER }}" -var="buckets3=${{ vars.BUCKET }}" -var="task_queue=${{ vars.TASK_QUEUE }}" -var="process_queue=${{ vars.PROCESS_QUEUE }}" -var="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}"

  deploy:
    name: Deploy
    needs: plan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Get app version
      run: |
        version=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "App version: $version"
        echo "VERSION=$version" >> $GITHUB_ENV
        
    - name: Apply changes
      run: |
        cd terraform
        terraform fmt -recursive
        terraform init
        terraform apply -var='aws_region=${{ vars.AWS_REGION }}' -var='app_version=${{ env.VERSION }}' -var="tokensecret=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var="projectname=${{ vars.PROJECT }}" -var="cluster_name=${{ vars.CLUSTER }}" -var="buckets3=${{ vars.BUCKET }}" -var="task_queue=${{ vars.TASK_QUEUE }}" -var="process_queue=${{ vars.PROCESS_QUEUE }}" -var="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" --auto-approve
